function result = test_node_degree(graph_generating_algorithm, ~, node_degree, options)
    switch graph_generating_algorithm{1}{1}
        case "Erdos Renyi"
            graph_algorithm = @erdos_renyi;
            params = num2cell([options.size, 2.2*node_degree/(options.size-1)]);
            [result.results_cost, result.results_time, result.results_trivial] = run_test( ...
                graph_algorithm, ...
                params, ...
                "sample_size", options.sample_size, ...
                "fraction_targets", options.fract_targ, ...
                "fraction_disturbances", options.fract_dist, ...
                "ddp", options.ddp ...
                );
        case "Watts Strogratz"
            if iseven(node_degree)
                graph_algorithm = @watts_strogatz;
                params = num2cell([options.size, floor(node_degree/2), 0.2]);
                [result.results_cost, result.results_time, result.results_trivial] = run_test( ...
                    graph_algorithm, ...
                    params, ...
                    "sample_size", options.sample_size, ...
                    "fraction_targets", options.fract_targ, ...
                    "fraction_disturbances", options.fract_dist, ...
                    "ddp", options.ddp ...
                    );
            else
                result.results_cost = 0;
                result.results_time = 0;
                result.results_trivial = 0;
            end
        case "Scale Free"
            beta = [0 0.55 0.70 0.79 0.845 0.871 0.893];
            graph_algorithm = @sfg;
            alpha = (1-beta(node_degree))/2;
            gamma = (1-beta(node_degree))/2;
            delta_in = 10;
            delta_out = 10;
            params = num2cell([options.size, alpha, beta(node_degree), gamma, delta_in, delta_out]);
            [result.results_cost, result.results_time, result.results_trivial] = run_test( ...
                graph_algorithm, ...
                params, ...
                "sample_size", options.sample_size, ...
                "fraction_targets", options.fract_targ, ...
                "fraction_disturbances", options.fract_dist, ...
                "ddp", options.ddp ...
                );
    end

function result = iseven(m)
    result = rem(m, 2) == 0;